AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  serverless-web-app

  SAM Template for serverless-web-app

Parameters:

  StageName:
    Type: String
    Default: Prod

# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:

  Function:
    Timeout: 3
    Runtime: python3.8

Resources:

  DeleteFunction:
    Type: AWS::Serverless::Function # Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      CodeUri: src/delete/
      Handler: app.lambda_handler
      Policies:
        - DynamoDBWritePolicy:
            TableName: !Ref QuotesTable
      Environment:
            Variables:
                POWERTOOLS_SERVICE_NAME: delete_quotes
      Events:
        CrudApi:
          Type: Api # API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            RestApiId: !Ref CrudApi
            Path: /quotes
            Method: delete
            Auth:
               Authorizer: CognitoAuthorizer

  GetFunction:
    Type: AWS::Serverless::Function # Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      CodeUri: src/get/
      Handler: app.lambda_handler
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref QuotesTable
      Environment:
            Variables:
                POWERTOOLS_SERVICE_NAME: get_quotes
                QUOTES_TABLE: !Ref QuotesTable
      Events:
        GetQuotes:
          Type: Api # API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            RestApiId: !Ref CrudApi
            Path: /quotes
            Method: get
        GetQuote:
          Type: Api
          Properties:
            RestApiId: !Ref CrudApi
            Path: /quotes/{quoteId}
            Method: get

  PostFunction:
    Type: AWS::Serverless::Function # Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      CodeUri: src/post/
      Handler: app.lambda_handler
      Policies:
        - DynamoDBWritePolicy:
            TableName: !Ref QuotesTable
      Environment:
            Variables:
                POWERTOOLS_SERVICE_NAME: post_quotes
      Events:
        CreateQuote:
          Type: Api # API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            RestApiId: !Ref CrudApi
            Path: /quotes
            Method: post
            Auth:
               Authorizer: CognitoAuthorizer

  PutFunction:
    Type: AWS::Serverless::Function # Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      CodeUri: src/put/
      Handler: app.lambda_handler
      Policies:
        - DynamoDBWritePolicy:
            TableName: !Ref QuotesTable
      Environment:
            Variables:
                POWERTOOLS_SERVICE_NAME: put_quotes
      Events:
        UpdateQuote:
          Type: Api # API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            RestApiId: !Ref CrudApi
            Path: /quotes/{quoteId}
            Method: put
            Auth:
               Authorizer: CognitoAuthorizer
  
  QuotesTable:
    Type: AWS::Serverless::SimpleTable

  CrudApi:
    Type: AWS::Serverless::Api
    Properties:
      Name: !Sub "${AWS::StackName}"
      StageName: !Ref StageName
      # Know the security implications before doing this on a production site
      Cors:
        AllowMethods: "'*'"
        AllowHeaders: "'*'"
        AllowOrigin: "'*'"
      Auth:
        Authorizers:
          CognitoAuthorizer:
            UserPoolArn: !GetAtt "UserPool.Arn"

  UserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      AdminCreateUserConfig:
        AllowAdminCreateUserOnly: false
      UserPoolName: !Sub '${AWS::StackName}-Users'
      UsernameAttributes:
        - email
      AutoVerifiedAttributes:
        - email
      Policies:
        PasswordPolicy:
          MinimumLength: 6
          RequireLowercase: true
          RequireNumbers: false
          RequireSymbols: false
          RequireUppercase: true

  UserPoolTokenClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      UserPoolId: !Ref UserPool
      GenerateSecret: false
      ExplicitAuthFlows:
        - ALLOW_USER_PASSWORD_AUTH
        - ALLOW_REFRESH_TOKEN_AUTH

Outputs:
  # Find out more about other implicit resources you can reference within SAM
  # https://github.com/awslabs/serverless-application-model/blob/master/docs/internals/generated_resources.rst#api
  Api:
    Description: "Quotes API Gateway endpoint URL"
    Value: !Sub "https://${CrudApi}.execute-api.${AWS::Region}.amazonaws.com/${StageName}/quotes/"
